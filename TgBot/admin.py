import logging
from typing import Optional, Tuple, Dict
from aiogram import Router, Bot, F
from aiogram.types import Message
from aiogram.enums.chat_type import ChatType
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from my_config.Cfg import Config
from channel_registry import (
    save_channel_info,
    get_channel_info,
    list_all_channels,
    delete_channel_info,
)
from strategy_manager import start_strategy

router = Router()
logger = logging.getLogger(__name__)

# –û–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä Bot –¥–ª—è –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ API
bot = Bot(
    token=Config.Telegram_Token,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)


@router.message(F.text.startswith("/register_channel"))
async def register_channel(message: Message):
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ä–µ–µ—Å—Ç—Ä.
    - –í–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞: /register_channel MODEL TICKER
      (chat_id –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, thread_id = message.message_thread_id)
    - –ò–∑ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –æ–±—ã—á–Ω–æ–≥–æ —á–∞—Ç–∞: /register_channel MODEL TICKER CHAT_ID:THREAD_ID
    """
    parts = message.text.split(maxsplit=3)
    chat = message.chat

    # 1) –í—ã–∑—ã–≤–∞–µ–º –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä—É–º–∞
    if getattr(chat, "is_forum", False) and message.message_thread_id:
        if len(parts) != 3:
            return await message.reply(
                "‚ùå –í–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register_channel MODEL TICKER`",
                parse_mode=None
            )
        _, model, ticker = parts
        chat_id = chat.id
        thread_id = message.message_thread_id

    # 2) –í—ã–∑—ã–≤–∞–µ–º –∏–∑ –õ–° / –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞
    else:
        if len(parts) != 4:
            return await message.reply(
                "‚ùå –í–Ω–µ —Ç–µ–º—ã: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/register_channel MODEL TICKER CHAT_ID:THREAD_ID`",
                parse_mode=None
            )
        _, model, ticker, chat_thread = parts
        try:
            chat_id_str, thread_id_str = chat_thread.split(":", 1)
            chat_id = int(chat_id_str)
            thread_id = int(thread_id_str)
        except ValueError:
            return await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç `CHAT_ID:THREAD_ID`",
                parse_mode=None
            )

    model = model.upper()
    ticker = ticker.upper()
    save_channel_info(model, ticker, chat_id, thread_id)
    logger.info(f"[Admin] –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª: {model}_{ticker} ‚Üí {chat_id}:{thread_id}")

    await message.reply(
        f"‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–Ω–∞–ª –¥–ª—è <b>{model} {ticker}</b>:\n"
        f"‚Ä¢ chat_id = <code>{chat_id}</code>\n"
        f"‚Ä¢ thread_id = <code>{thread_id}</code>",
        parse_mode=ParseMode.HTML
    )


@router.message(F.text.startswith("/remove_channel"))
async def remove_channel_cmd(message: Message):
    """
    –£–¥–∞–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —á–∞—Ç/—Ç–µ–º—É –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º—É —Ç–µ–º—É –≤ Telegram.
    –§–æ—Ä–º–∞—Ç: /remove_channel MODEL TICKER
    """
    if message.from_user.id != Config.Admin_User_Id:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    parts = message.text.split(maxsplit=2)
    if len(parts) != 3:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /remove_channel MODEL TICKER")

    _, model, ticker = parts
    model = model.upper()
    ticker = ticker.upper()

    info = get_channel_info(model, ticker)
    if not info:
        return await message.answer(f"‚ùå –î–ª—è {model} {ticker} –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–µ–µ—Å—Ç—Ä–µ.")

    chat_id, thread_id = info

    # 1) –£–¥–∞–ª—è–µ–º —Ç–µ–º—É –≤ Telegram (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    try:
        await bot.delete_forum_topic(chat_id=chat_id, message_thread_id=thread_id)
        logger.info(f"[Admin] –£–¥–∞–ª–µ–Ω–∞ —Ç–µ–º–∞ –≤ Telegram: {model}_{ticker} ‚Üí {chat_id}:{thread_id}")
    except Exception as e:
        logger.warning(f"[Admin] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É –≤ Telegram: {e}")

    # 2) –£–¥–∞–ª—è–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
    deleted = delete_channel_info(model, ticker)
    if deleted:
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å –¥–ª—è {model} {ticker} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞.")
    else:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è {model} {ticker} –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.")


@router.message(F.text.startswith("/run_strategy"))
async def run_strategy_cmd(message: Message):
    """
    –ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ live-—Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
    –§–æ—Ä–º–∞—Ç: /run_strategy MODEL TICKER BALANCE
    """
    if message.from_user.id != Config.Admin_User_Id:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    parts = message.text.split(maxsplit=3)
    if len(parts) != 4:
        return await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: /run_strategy MODEL TICKER BALANCE")

    _, model, ticker, balance_str = parts
    model = model
    ticker = ticker.upper()
    try:
        balance = float(balance_str)
    except ValueError:
        return await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BALANCE.")

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Ç–µ–º—É
    info = get_channel_info(model, ticker)
    if not info:
        return await message.answer(
            "‚ùå –ö–∞–Ω–∞–ª/—Ç–µ–º–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í—ã–ø–æ–ª–Ω–∏—Ç–µ `/register_channel`."
        )
    chat_id, thread_id = info

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    await start_strategy(
        user_id=str(message.from_user.id),
        model_name=model,
        ticker=ticker,
        balance=balance,
        chat_id=chat_id,
        thread_id=thread_id
    )

    await message.answer(
        f"üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è <b>{model} {ticker}</b> –∑–∞–ø—É—â–µ–Ω–∞.\n"
        f"‚Ä¢ chat_id = <code>{chat_id}</code>\n"
        f"‚Ä¢ thread_id = <code>{thread_id}</code>",
        parse_mode=ParseMode.HTML
    )


@router.message(F.text == "/list_channels")
async def list_channels_handler(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∏—Ö —Ñ–æ—Ä—É–º—ã.
    """
    if message.from_user.id != Config.Admin_User_Id:
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

    registry = list_all_channels()
    if not isinstance(registry, dict) or not registry:
        return await message.answer("üì≠ –†–µ–µ—Å—Ç—Ä –ø—É—Å—Ç.")

    text = "üìã <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∏ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    for key, val in registry.items():
        model, ticker = key.split("_", 1)
        text += (
            f"‚Ä¢ <b>{model} {ticker}</b>\n"
            f"  ‚Äì chat_id: <code>{val['chat_id']}</code>\n"
            f"  ‚Äì thread_id: <code>{val['thread_id']}</code>\n\n"
        )

    await message.answer(text)


@router.message(F.text == "/chatinfo")
async def chat_info_handler(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç chat_id –∏ thread_id —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∏ —Ç–µ–º—ã.
    """
    chat_id = message.chat.id
    thread_id = message.message_thread_id

    await message.answer(
        f"<b>chat_id</b>: <code>{chat_id}</code>\n"
        f"<b>thread_id</b>: <code>{thread_id}</code>",
        parse_mode=ParseMode.HTML
    )