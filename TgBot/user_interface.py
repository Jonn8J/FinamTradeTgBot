import logging
import os
import pandas as pd
from datetime import datetime
from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.enums.parse_mode import ParseMode
from Models.strategy_registry import get_strategy
from Simulation import backtest, generate_trade_graphs
from request_manager import RequestManager
from model_config import get_model_keyboard, get_stock_keyboard
from aiogram.types import FSInputFile
from my_config.Cfg import Config

router = Router()
logger = logging.getLogger(__name__)

user_data = {}
stock_codes = {
    '–°–±–µ—Ä–±–∞–Ω–∫': 'SBER', '–í–¢–ë': 'VTBR', '–ì–∞–∑–ø—Ä–æ–º': 'GAZP', '–°—É—Ä–≥—É—Ç–Ω–µ—Ñ—Ç–µ–≥–∞–∑': 'SNGS',
    '–¢–∞—Ç–Ω–µ—Ñ—Ç—å': 'TATN', '–õ—É–∫–æ–π–ª': 'LKOH', '–ù–æ—Ä–Ω–∏–∫–µ–ª—å': 'GMKN', '–†–æ—Å–Ω–µ—Ñ—Ç—å': 'ROSN', '–ù–æ–≤–∞—Ç—ç–∫': 'NVTK'
}


@router.message(F.text == "/start")
async def start_handler(message: Message):
    user_id = str(message.chat.id)
    user_data[user_id] = {"user_id": user_id}

    welcome_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä —Ç–æ—Ä–≥–æ–≤–ª–∏ FinamBot!\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é —Ç–æ—Ä–≥–æ–≤–ª–∏\n"
        "üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã –ò–ò –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data="start_simulation")],
        [InlineKeyboardButton(text="üì∞ –ü–µ—Ä–µ–π—Ç–∏ –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª", url="https://t.me/your_channel_here")]
    ])

    await message.answer(welcome_text, reply_markup=markup)


@router.callback_query(F.data == "start_simulation")
async def start_simulation(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    user_data[user_id]["step"] = "awaiting_amount"
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000):")


@router.message(F.text.regexp(r"^\d+([.,]\d+)?$"))
async def process_amount(message: Message):
    user_id = str(message.chat.id)
    if user_data.get(user_id, {}).get("step") != "awaiting_amount":
        return

    try:
        amount = float(message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError
        user_data[user_id]["trading_amount"] = amount
        user_data[user_id]["step"] = "awaiting_ticker"

        await message.answer("üìà –í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ü–∏—é –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏:", reply_markup=get_stock_keyboard())
    except ValueError:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100000).")


@router.callback_query(F.data.startswith("ticker:"))
async def choose_ticker(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    ticker_name = callback.data.split("ticker:")[1]
    user_data[user_id]["ticker"] = stock_codes[ticker_name]
    user_data[user_id]["step"] = "awaiting_model"

    await callback.message.edit_text(f"üìà –í—ã–±—Ä–∞–Ω–Ω–∞—è –∞–∫—Ü–∏—è: {ticker_name}")
    await callback.message.answer("üß† –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:", reply_markup=get_model_keyboard())


@router.callback_query(F.data.startswith("model:"))
async def choose_model(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    model_name = callback.data.split("model:")[1]
    user_data[user_id]["model_name"] = model_name
    user_data[user_id]["step"] = "awaiting_start_date"

    await callback.message.edit_text(f"üß† –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {model_name}")
    await callback.message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 01.12.2024):")


@router.message(F.text.regexp(r"^\d{2}\.\d{2}\.\d{4}$"))
async def set_dates(message: Message):
    user_id = str(message.chat.id)
    step = user_data.get(user_id, {}).get("step")

    try:
        date = datetime.strptime(message.text, "%d.%m.%Y")

        if step == "awaiting_start_date":
            user_data[user_id]["start_date"] = message.text
            user_data[user_id]["step"] = "awaiting_end_date"
            await message.answer("üìÖ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 05.04.2025):")

        elif step == "awaiting_end_date":
            user_data[user_id]["end_date"] = message.text
            user_data[user_id]["step"] = "ready"

            await confirm_configuration(message)

    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 01.12.2024")


async def confirm_configuration(message: Message):
    user_id = str(message.chat.id)
    data = user_data[user_id]

    summary = (
        f"üéØ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:\n"
        f"–ê–∫—Ü–∏—è: {data['ticker']}\n"
        f"–ú–æ–¥–µ–ª—å: {data['model_name']}\n"
        f"–°—É–º–º–∞: {data['trading_amount']:.2f} —Ä—É–±.\n"
        f"–ü–µ—Ä–∏–æ–¥: {data['start_date']} ‚Äî {data['end_date']}"
    )

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é", callback_data="simulate_now")]
    ])
    await message.answer(summary, reply_markup=markup)


@router.callback_query(F.data == "simulate_now")
async def simulate_from_callback(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    data = user_data.get(user_id)

    if not data:
        await callback.message.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.")
        return

    ticker = data["ticker"]
    model_name = data["model_name"]
    balance = data["trading_amount"]
    start_date = data["start_date"]
    end_date = data["end_date"]

    await callback.message.edit_text("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
    df = await RequestManager.get_data("TQBR", ticker, "M5")

    if df is None or df.empty:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    df["datetime"] = pd.to_datetime(df["datetime"], format="%d.%m.%Y %H:%M")
    df.set_index("datetime", inplace=True)
    df = df[(df.index >= pd.to_datetime(start_date, format="%d.%m.%Y")) &
            (df.index <= pd.to_datetime(end_date, format="%d.%m.%Y"))]

    if df.empty:
        await callback.message.answer("‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
        return

    kwargs = {}
    if model_name == "Random_Forest":
        kwargs["model_path"] = "../Models/Random_Forest/random_forest_model_old.pkl"
    elif model_name == "LSTM":
        kwargs["model_path"] = "../Models/LSTM/lstm_improved_moded_model.h5"
    elif model_name == "LSTM_PPO":
        kwargs["model_path"] = "../Models/LSTM/LSTM_PPO/ppo_lstm_gazp_model.zip"
    elif model_name == "LSTM_PPO_1":
        path = "ppo_lstm_gazp_1_model"
        kwargs["model_path"] = "../Models/LSTM/LSTM_PPO/ppo_lstm_checkpoints/best_of_thebest"
            #"Models/LSTM/LSTM_PPO/ppo_lstm_checkpoints/ppo_lstm_checkpoint_870000_steps.zip"
            # f"Models/LSTM/LSTM_PPO/{path}.zip"
    elif model_name == "Hybrid":
        path = "best_of_the_best"
        kwargs["model_path"] = f"../Models/Hybrid/{path}"
            #"Models/Hybrid/ppo_lstm_hybrid_checkpoints/ppo_lstm_hybrid_checkpoint_100000_steps.zip"
            # f"Models/Hybrid/{path}.zip"
    strategy = get_strategy(model_name, **kwargs)

    plot_file = f"Simulate_data/{model_name}/{ticker}_backtest_balance.png"
    log_path = f"Simulate_data/{model_name}_stats_log.txt"
    os.makedirs(os.path.dirname(plot_file), exist_ok=True)

    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    balance_df, trades = backtest(
        df=df,
        strategy=strategy,
        start_balance=balance,
        commission=0.0005,
        ticker=ticker,
        model_name=model_name,
        start_date_str=start_date,
        end_date_str=end_date,
        log_path=log_path,
        plot_file=plot_file
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if os.path.exists(plot_file):
        await callback.message.answer_photo(FSInputFile(plot_file), caption="üìä –ì—Ä–∞—Ñ–∏–∫ –±–∞–ª–∞–Ω—Å–∞")
        os.remove(plot_file)

    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å–¥–µ–ª–æ–∫
    await generate_trade_graphs(
        trades=trades,
        df=df,
        user_id=user_id,
        security_board="TQBR",
        ticker=ticker,
        model=model_name
    )

    # –ì—Ä–∞—Ñ–∏–∫–∏ —Å–¥–µ–ª–æ–∫
    graph_dir = f"Graph/{model_name}/{ticker}"
    graph_files = sorted([
        file for file in os.listdir(graph_dir)
        if file.startswith(f"graph_{user_id}_part") and file.endswith(".png")
    ])

    if graph_files:
        await callback.message.answer("üìå *–°–¥–µ–ª–∫–∏ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:*", parse_mode=ParseMode.MARKDOWN)

        for file in graph_files:
            file_path = os.path.join(graph_dir, file)
            await callback.message.answer_photo(FSInputFile(file_path))
            os.remove(file_path)

    # üìå –û–±—â–∏–µ –∏—Ç–æ–≥–∏
    final_balance = balance_df["balance"].iloc[-1]
    returns = balance_df["balance"].pct_change().dropna()
    sharpe = returns.mean() / returns.std() * (252 ** 0.5) if not returns.empty else 0
    max_dd = ((balance_df["balance"].cummax() - balance_df["balance"]) / balance_df["balance"].cummax()).max()

    summary = (
        "üìã *–û–±—â–∏–µ –∏—Ç–æ–≥–∏ —Å–∏–º—É–ª—è—Ü–∏–∏:*\n"
        f"‚Ä¢ üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: `{final_balance:,.2f}` —Ä—É–±.\n"
        f"‚Ä¢ üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: `{max_dd:.2%}`\n"
        f"‚Ä¢ üìà –ö–æ—ç—Ñ. –®–∞—Ä–ø–∞: `{sharpe:.4f}`\n"
        f"‚Ä¢ üîÑ –°–¥–µ–ª–æ–∫: `{len(trades)}`"
    )

    await callback.message.answer(summary, parse_mode=ParseMode.MARKDOWN)


# –¢–µ–∫—Å—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_HELP_TEXT = (
    "ü§ñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã FinamBot:\n"
    "/start ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
    "/simulate ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é (–ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)\n"
    "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
)

ADMIN_HELP_TEXT = (
    USER_HELP_TEXT +
    "üìã –ê–¥–º–∏–Ω‚Äë–∫–æ–º–∞–Ω–¥—ã:\n"
    "/register_channel MODEL TICKER THREAD_ID ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ä—É–º–Ω—É—é —Ç–µ–º—É\n"
    "/add_channel MODEL TICKER CHAT_ID:THREAD_ID ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é\n"
    "/remove_channel MODEL TICKER ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª\n"
    "/list_channels ‚Äî —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n"
    "/run_strategy MODEL TICKER BALANCE ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å live‚Äë—Å—Ç—Ä–∞—Ç–µ–≥–∏—é\n"
    "/list_topics <chat_id> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–º—ã —Ñ–æ—Ä—É–º–∞"
)

# –ö–Ω–æ–ø–∫–∞ ¬´–ü–æ–º–æ—â—å¬ª –≤ –æ–±—ã—á–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
HELP_KEYBOARD = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–æ–º–æ—â—å")]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(F.text == "/help")
@router.message(F.text == "–ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    is_admin = (message.from_user.id == Config.Admin_User_Id)
    text = ADMIN_HELP_TEXT if is_admin else USER_HELP_TEXT
    # —É–±–∏—Ä–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Markdown‚Äê—Å–ø—Ä–∞–≤–∫—É
    await message.answer(
        f"```\n{text}\n```",
        parse_mode=ParseMode.MARKDOWN
    )


@router.message()  # —ç—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
async def fallback(message: Message):
    # –µ—Å–ª–∏ –ø—Ä–∏–ª–µ—Ç–µ–ª /start –∏–ª–∏ –¥—Ä—É–≥–æ–π –∏–∑–≤–µ—Å—Ç–Ω—ã–π ‚Äî –ø—Ä–æ–ø—É—Å—Ç–∏–º
    if message.text in ("/start", "/simulate", "/help", "–ü–æ–º–æ—â—å"):
        return
    # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–º–æ—â—å¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.",
        reply_markup=HELP_KEYBOARD
    )

def save_user_data(user_id):
    os.makedirs("Data", exist_ok=True)
    path = "Data/users.txt"
    df_new = pd.DataFrame([user_data[user_id]])
    df_new.set_index("user_id", inplace=True)

    if os.path.exists(path):
        df = pd.read_csv(path, sep="\t", index_col="user_id")
        df.update(df_new)
        df = pd.concat([df, df_new[~df_new.index.isin(df.index)]])
    else:
        df = df_new

    df.to_csv(path, sep="\t")
